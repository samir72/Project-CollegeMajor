cat("\014")
library(simpleboot)
library(dplyr)
library(repr)
source('Loaddata.R')
source('ZScoreNormalise.R')
# Load and cleanse the csv file.
allages = Loaddata('all-ages.csv')
gradstudents = Loaddata('grad-students.csv')
recentgrads = Loaddata('recent-grads.csv')
#Check out the structure of the cleansed object.
str((recentgrads))
#z-Score Normalization of grad mediam income data
df_gradstudent_median <- ZScoreNormalise(gradstudents$Grad_median)
#z-Score Normalization of recent grad mediam income data
df_recent_gradstudent_median <- ZScoreNormalise(recentgrads$Median)
#Add log median and normalized log median to the graduate data frame.
gradstudents = mutate(gradstudents,normalized_gradmedian = df_gradstudent_median$normalized_logColumn)
#Add log median and normalized log median to the recent graduate data frame.
recentgrads = mutate(recentgrads,normalized_gradmedian = df_recent_gradstudent_median$normalized_logColumn)
#z-Score Normalization of grad unemployment data
df_gradstudent_unemployment <- ZScoreNormalise(gradstudents$Grad_unemployment_rate)
#z-Score Normalization of recent grad unemployment data
df_recent_gradstudent_unemployment <- ZScoreNormalise(recentgrads$Unemployment_rate)
#Add log unemployment and normalized log unemployment to the graduate data frame.
gradstudents = mutate(gradstudents,normalized_gradunemployment = df_gradstudent_unemployment$normalized_logColumn)
#Add log unemployment and normalized log unemployment to the recent graduate data frame.
recentgrads = mutate(recentgrads,normalized_gradundemployment = df_recent_gradstudent_unemployment$normalized_logColumn)
View(df_recent_gradstudent_unemployment)
View(df_recent_gradstudent_unemployment)
View(df_gradstudent_median)
View(df_gradstudent_median)
View(df_gradstudent_unemployment)
View(df_gradstudent_unemployment)
View(gradstudents)
View(gradstudents)
View(recentgrads)
View(recentgrads)
#Group data by major category
Recent_Graduate_GroupbyMajorCategorybyMedian <-
recentgrads %>% group_by(Major_category) %>% summarise(normalized_gradmedian = mean(normalized_gradmedian))
#Group data by unemployment
Recent_Graduate_GroupbyMajorCategory_unemployment <-
recentgrads %>% group_by(Major_category) %>% summarise(normalized_gradundemployment = mean(normalized_gradundemployment))
View(Recent_Graduate_GroupbyMajorCategory_unemployment)
View(Recent_Graduate_GroupbyMajorCategory_unemployment)
hart for Wall Area
require(ggplot2)
ggplot(recentgrads, aes(x=reorder(rank,rank, function(x) -length(x)))) + ## Function shorts the bars
geom_bar() +
xlab('Rank')
theme(axis.text.x = element_text(angle = 90, hjust = 1)) ## Theme function for conrol
require(ggplot2)
ggplot(recentgrads, aes(x=reorder(rank,rank, function(x) -length(x)))) + ## Function shorts the bars
geom_bar() +
xlab('Rank')
str((recentgrads))
ggplot(recentgrads, aes(x = Rank, y = Median) + geom_boxplot() +
xlab('Rank') + ggtitle('Rank by Median'))
numeric_recentgrads <- recentgrads[sapply(recentgrads,is.numeric)]
str(numeric_recentgrads)
numeric_recentgrads <- recentgrads[lapply(recentgrads[,],as.numeric)]
numeric_recentgrads <- recentgrads[lapply(recentgrads,as.numeric)]
numeric_recentgrads <- lapply(recentgrads,as.numeric)
str(numeric_recentgrads)
rm(list=ls())
# Clear Console:
cat("\014")
library(simpleboot)
library(dplyr)
library(repr)
source('Loaddata.R')
source('ZScoreNormalise.R')
# Load and cleanse the csv file.
allages = Loaddata('all-ages.csv')
gradstudents = Loaddata('grad-students.csv')
recentgrads = Loaddata('recent-grads.csv')
#Check out the structure of the cleansed object.
str((recentgrads))
numeric_recentgrads <- recentgrads[sapply(recentgrads,is.numeric)]
numeric_recentgrads <- lapply(numeric_recentgrads,as.numeric)
str(numeric_recentgrads)
ggplot(numeric_recentgrads, aes(x = Rank, y = Median) + geom_boxplot() +
xlab('Rank') + ggtitle('Rank by Median'))
?ggplot
ggplot(numeric_recentgrads, aes(x = Rank, y = Median) + geom_boxplot() +
xlab('Rank') + ggtitle('Rank by Median'))
numeric_recentgrads <- data.frame(lapply(numeric_recentgrads,as.numeric))
str(numeric_recentgrads)
require(ggplot2)
ggplot(numeric_recentgrads, aes(x = Rank, y = Median) + geom_boxplot() +
xlab('Rank') + ggtitle('Rank by Median'))
ggplot(numeric_recentgrads, aes(x = Rank, y = Median) + geom_boxplot() +
xlab('Rank') + ggtitle('Rank by Median'))
ggplot(numeric_recentgrads, aes(x = factor(Rank), y = Median) + geom_boxplot() +
xlab('Rank') + ggtitle('Rank by Median'))
rm(list=ls())
# Clear Console:
cat("\014")
library(simpleboot)
library(dplyr)
library(repr)
source('Loaddata.R')
source('ZScoreNormalise.R')
# Load and cleanse the csv file.
allages = Loaddata('all-ages.csv')
gradstudents = Loaddata('grad-students.csv')
recentgrads = Loaddata('recent-grads.csv')
#Check out the structure of the cleansed object.
str((recentgrads))
numeric_recentgrads <- data.frame(lapply(numeric_recentgrads,as.numeric))
numeric_recentgrads <- recentgrads[sapply(recentgrads,is.numeric)]
numeric_recentgrads <- data.frame(lapply(numeric_recentgrads,as.numeric))
str(numeric_recentgrads)
rm(list=ls())
# Clear Console:
cat("\014")
library(simpleboot)
library(dplyr)
library(repr)
source('Loaddata.R')
source('ZScoreNormalise.R')
# Load and cleanse the csv file.
allages = Loaddata('all-ages.csv')
gradstudents = Loaddata('grad-students.csv')
recentgrads = Loaddata('recent-grads.csv')
#Check out the structure of the cleansed object.
str((recentgrads))
numeric_recentgrads <- recentgrads[sapply(recentgrads,is.numeric)]
numeric_recentgrads <- data.frame(lapply(numeric_recentgrads,as.numeric))
str(numeric_recentgrads)
df_gradstudent_median <- ZScoreNormalise(gradstudents$Grad_median)
#z-Score Normalization of recent grad mediam income data
df_recent_gradstudent_median <- ZScoreNormalise(recentgrads$Median)
#Add log median and normalized log median to the graduate data frame.
gradstudents = mutate(gradstudents,normalized_gradmedian = df_gradstudent_median$normalized_logColumn)
#Add log median and normalized log median to the recent graduate data frame.
recentgrads = mutate(recentgrads,normalized_gradmedian = df_recent_gradstudent_median$normalized_logColumn)
#z-Score Normalization of grad unemployment data
df_gradstudent_unemployment <- ZScoreNormalise(gradstudents$Grad_unemployment_rate)
#z-Score Normalization of recent grad unemployment data
df_recent_gradstudent_unemployment <- ZScoreNormalise(recentgrads$Unemployment_rate)
#Add log unemployment and normalized log unemployment to the graduate data frame.
gradstudents = mutate(gradstudents,normalized_gradunemployment = df_gradstudent_unemployment$normalized_logColumn)
#Add log unemployment and normalized log unemployment to the recent graduate data frame.
recentgrads = mutate(recentgrads,normalized_gradundemployment = df_recent_gradstudent_unemployment$normalized_logColumn)
#Group data by major category
Recent_Graduate_GroupbyMajorCategorybyMedian <-
recentgrads %>% group_by(Major_category) %>% summarise(normalized_gradmedian = mean(normalized_gradmedian))
#Group data by unemployment
Recent_Graduate_GroupbyMajorCategory_unemployment <-
recentgrads %>% group_by(Major_category) %>% summarise(normalized_gradundemployment = mean(normalized_gradundemployment))
View(Recent_Graduate_GroupbyMajorCategory_unemployment)
View(Recent_Graduate_GroupbyMajorCategory_unemployment)
recentgrads$Major_category_n <- as.numeric(factor(recentgrads$Major_category , levels=Recent_Graduate_GroupbyMajorCategory_unemployment$Major_category)
#Stratifying the data.
#Stratify By Major Category
loggradmediangroupedbyMajorCategory = gradstudents %>% filter(gradstudents$Major_category == 'gas')
loggradmediangroupedbyfueltypediesel = gradstudents %>% filter(fuel.type == 'diesel')
#Stratify by Aspiration
loggradmediangroupedbyaspirationstd = gradstudents %>% filter(aspiration == 'std')
loggradmediangroupedbyaspirationsturbo = gradstudents %>% filter(aspiration == 'turbo')
#Stratify data as per body style.
stratified_pricebody_con = gradstudents %>% filter(body.style == 'convertible')
stratified_pricebody_hat = gradstudents %>% filter(body.style == 'hatchback')
stratified_pricebody_sed = gradstudents %>% filter(body.style == 'sedan')
stratified_pricebody_wag = gradstudents %>% filter(body.style == 'wagon')
stratified_pricebody_har = gradstudents %>% filter(body.style == 'hardtop')
#Standard mean.
stdmeanftgas <- mean(loggradmediangroupedbyfueltypegas$normalized_gradlogmedian)
stdmeanftdiesel <- mean(loggradmediangroupedbyfueltypediesel$normalized_gradlogmedian)
stdmeanaspstd <- mean(loggradmediangroupedbyaspirationstd$normalized_gradlogmedian)
stdmeanasptur <- mean(loggradmediangroupedbyaspirationsturbo$normalized_gradlogmedian)
stdmeanbsconv <- mean(stratified_pricebody_con$normalized_gradlogmedian)
stdmeanbshar <- mean(stratified_pricebody_har$normalized_gradlogmedian)
stdmeanbshat <- mean(stratified_pricebody_hat$normalized_gradlogmedian)
stdmeanbssed <- mean(stratified_pricebody_sed$normalized_gradlogmedian)
stdmeanbswag <- mean(stratified_pricebody_wag$normalized_gradlogmedian)
## Student T-Test to calculate the mean based on Fuel Type.
ttestftgas <- t.test(loggradmediangroupedbyfueltypegas$normalized_gradlogmedian, gradstudents$normalized_gradlogmedian, alternative = "two.sided")
ttestftgasestimate <- ttestftgas$estimate
ttestftgasmean <- ttestftgasestimate[1]
ttestftdiesel <- t.test(loggradmediangroupedbyfueltypediesel$normalized_gradlogmedian, gradstudents$normalized_gradlogmedian, alternative = "two.sided")
ttestftdieselestimate <- ttestftdiesel$estimate
ttestftdieselmean <- ttestftdieselestimate[1]
## Student T-Test to calculate the mean based on Aspiration.
ttestaspstd<- t.test(loggradmediangroupedbyaspirationstd$normalized_gradlogmedian, gradstudents$normalized_gradlogmedian, alternative = "two.sided")
ttestaspstdestimate <- ttestaspstd$estimate
ttestaspstdmean <- ttestaspstdestimate[1]
ttestaspturbo <- t.test(loggradmediangroupedbyaspirationsturbo$normalized_gradlogmedian, gradstudents$normalized_gradlogmedian, alternative = "two.sided")
ttestaspturboestimate <- ttestaspturbo$estimate
ttestaspturbomean <- ttestaspturboestimate[1]
## Bootstrap the mean of the auto price grouped by aspiration
mean.boot.aspstd = one.boot(loggradmediangroupedbyaspirationstd$normalized_gradlogmedian, mean, R = 100000)
mean.boot.aspturb = one.boot(loggradmediangroupedbyaspirationsturbo$normalized_gradlogmedian, mean, R = 100000)
# Retrieve mean for numerical comparision between the means using ONE BOOT method.
NumericBoostrapMeanAspStd <- mean.boot.aspstd$t0
NumericBoostrapMeanAspTur <- mean.boot.aspturb$t0
## Bootstrap the mean of the auto price grouped by fuel type
mean.boot.ftgas = one.boot(loggradmediangroupedbyfueltypegas$normalized_gradlogmedian, mean, R = 100000)
mean.boot.ftdiesel = one.boot(loggradmediangroupedbyfueltypediesel$normalized_gradlogmedian, mean, R = 100000)
# Retrieve mean for numerical comparision between the means using ONE BOOT method.
NumericBoostrapMeanftgas <- mean.boot.ftgas$t0
NumericBoostrapMeanftdiesel <- mean.boot.ftdiesel$t0
cat("Difference between ONE bootstrap resampled mean and standard mean of Turbo cars" , "is:",NumericBoostrapMeanAspTur - stdmeanasptur,"\n")
cat("Difference between ONE bootstrap resampled mean and standard mean of Standard cars" , "is:",NumericBoostrapMeanAspStd - stdmeanaspstd,"\n")
cat("Difference between ONE bootstrap resampled mean of turbo and t-test mean of turbo cars" , "is:",NumericBoostrapMeanAspTur - ttestaspturbomean,"\n")
cat("Difference between ONE bootstrap resampled mean of standard and t-test mean of standard cars" , "is:",NumericBoostrapMeanAspStd - ttestaspstdmean,"\n")
cat("Difference between ONE bootstrap resampled mean and standard mean of Diesel cars" , "is:",NumericBoostrapMeanftdiesel - stdmeanftdiesel,"\n")
cat("Difference between ONE bootstrap resampled mean and standard mean of Gas cars" , "is:",NumericBoostrapMeanftgas - stdmeanftgas,"\n")
cat("Difference between ONE bootstrap resampled mean of Diesel and t-test mean of Diesel cars" , "is:",NumericBoostrapMeanftdiesel - ttestftdieselmean,"\n")
cat("Difference between ONE bootstrap resampled mean of Gas and t-test mean of gas cars" , "is:",NumericBoostrapMeanftgas - ttestftgasmean,"\n")
#Plot Mean
plot.hist <- function(a, maxs,mins, cols = c('pop_A', 'pop_B'), nbins = 80, p = 0.05){
breaks = seq(maxs, mins, length.out = (nbins + 1))
hist(a, breaks = breaks, main = paste('Histogram of Means'), xlab = cols[1])
abline(v = mean(a), lwd = 4, col = 'red')
abline(v = 0, lwd = 4, col = 'blue')
abline(v = quantile(a, probs = p/2), lty = 3, col = 'red', lwd = 3)
abline(v = quantile(a, probs = (1 - p/2)), lty = 3, col = 'red', lwd = 3)
}
plot.t <- function(a, b, cols = c('pop_A', 'pop_B'), nbins = 80, p = 0.05){
maxs = max(c(max(a), max(b)))
mins = min(c(min(a), min(b)))
par(mfrow = c(2, 1))
plot.hist(a, maxs, mins, cols = cols[1])
plot.hist(b, maxs, mins, cols = cols[2])
par(mfrow = c(1, 1))
}
#Visually see the difference in between ONE bootstrap resampled Std and Turbo means.
plot.t(mean.boot.aspturb$t,mean.boot.aspstd$t, cols = c('Turbo', 'Standard'),nbins = 80)
#Visually see the difference in between ONE bootstrap resampled Std and Turbo means.
plot.t(mean.boot.ftdiesel$t, mean.boot.ftgas$t, cols = c('Diesel', 'Gas'),nbins = 80)
# Problem # 2
## Function to plot TWO BOOT.
plot.diff <- function(a, cols = c('pop_A'), nbins = 80, p = 0.05){
maxs = max(a)
mins = min(a)
plot.hist(a, maxs, mins, cols = cols[1])
}
options(repr.plot.width=6, repr.plot.height=4)
## One Bootstrap the mean of the auto price grouped by body style
mean.boot.bsconv = one.boot(stratified_pricebody_con$normalized_gradlogmedian, mean, R = 100000)
mean.boot.bshar = one.boot(stratified_pricebody_har$normalized_gradlogmedian, mean, R = 100000)
mean.boot.bshat = one.boot(stratified_pricebody_hat$normalized_gradlogmedian, mean, R = 100000)
mean.boot.bssed = one.boot(stratified_pricebody_sed$normalized_gradlogmedian, mean, R = 100000)
mean.boot.bswag = one.boot(stratified_pricebody_wag$normalized_gradlogmedian, mean, R = 100000)
# Two BootStrap mean of the auto price based on body style
## Two Bootstrap : Difference in means of Hardtop & Convertible
two.boot.mean.bsharconv = two.boot(stratified_pricebody_har$normalized_gradlogmedian,stratified_pricebody_con$normalized_gradlogmedian,mean, R = 100000)
## Two Bootstrap : Difference in means of Hatchback & Convertible
two.boot.mean.bshatconv = two.boot(stratified_pricebody_hat$normalized_gradlogmedian,stratified_pricebody_con$normalized_gradlogmedian,mean, R = 100000)
## Two Bootstrap : Difference in means of Sedan & Convertible
two.boot.mean.bssedconv = two.boot(stratified_pricebody_sed$normalized_gradlogmedian,stratified_pricebody_con$normalized_gradlogmedian,mean, R = 100000)
## Two Bootstrap : Difference in means of Wagon & Convertible
two.boot.mean.bswagconv = two.boot(stratified_pricebody_wag$normalized_gradlogmedian,stratified_pricebody_con$normalized_gradlogmedian,mean, R = 100000)
## Two Bootstrap : Difference in means of Hatchback & Hardtop
two.boot.mean.bshathar = two.boot(stratified_pricebody_hat$normalized_gradlogmedian,stratified_pricebody_har$normalized_gradlogmedian,mean, R = 100000)
## Two Bootstrap : Difference in means of Sedan & Hardtop
two.boot.mean.bssedhar = two.boot(stratified_pricebody_sed$normalized_gradlogmedian,stratified_pricebody_har$normalized_gradlogmedian,mean, R = 100000)
## Two Bootstrap : Difference in means of Wagon & Hardtop
two.boot.mean.bswaghar = two.boot(stratified_pricebody_wag$normalized_gradlogmedian,stratified_pricebody_har$normalized_gradlogmedian,mean, R = 100000)
## Two Bootstrap : Difference in means of Sedan & Hatchback
two.boot.mean.bssedhat = two.boot(stratified_pricebody_sed$normalized_gradlogmedian,stratified_pricebody_hat$normalized_gradlogmedian,mean, R = 100000)
## Two Bootstrap : Difference in means of Wagon & Hatchback
two.boot.mean.bswaghat = two.boot(stratified_pricebody_wag$normalized_gradlogmedian,stratified_pricebody_hat$normalized_gradlogmedian,mean, R = 100000)
## Two Bootstrap : Difference in means of Wagon & Sedan
two.boot.mean.bswagsed = two.boot(stratified_pricebody_wag$normalized_gradlogmedian,stratified_pricebody_sed$normalized_gradlogmedian,mean, R = 100000)
# Retrieve mean for numerical comparision between the means using ONE BOOT method.
NumericBoostrapMeanbsconv <- mean.boot.bsconv$t0
NumericBoostrapMeanbshar <- mean.boot.bshar$t0
NumericBoostrapMeanbshat <- mean.boot.bshat$t0
NumericBoostrapMeanbssed <- mean.boot.bssed$t0
NumericBoostrapMeanbswag <- mean.boot.bswag$t0
#Numerical difference.
cat("Difference between ONE bootstrap resampled mean of Hardtop and covertible cars" , "is:",NumericBoostrapMeanbshar - NumericBoostrapMeanbsconv,"\n")
cat("Difference between TWO bootstrap resampled mean of Hardtop and covertible cars" , "is:",two.boot.mean.bsharconv$t0,"\n")
cat("Difference between ONE bootstrap resampled mean of Hatchback and covertible cars" , "is:",NumericBoostrapMeanbshat - NumericBoostrapMeanbsconv,"\n")
cat("Difference between TWO bootstrap resampled mean of Hatchback and covertible cars" , "is:",two.boot.mean.bshatconv$t0,"\n")
cat("Difference between ONE bootstrap resampled mean of Sedan and covertible cars" , "is:",NumericBoostrapMeanbssed - NumericBoostrapMeanbsconv,"\n")
cat("Difference between TWO bootstrap resampled mean of Sedan and covertible cars" , "is:",two.boot.mean.bssedconv$t0,"\n")
cat("Difference between ONE bootstrap resampled mean of Wagon and covertible cars" , "is:",NumericBoostrapMeanbswag - NumericBoostrapMeanbsconv,"\n")
cat("Difference between TWO bootstrap resampled mean of Wagon and covertible cars" , "is:",two.boot.mean.bswagconv$t0,"\n")
cat("Difference between ONE bootstrap resampled mean of Hatchback and hardtop cars" , "is:",NumericBoostrapMeanbshat - NumericBoostrapMeanbshar,"\n")
cat("Difference between TWO bootstrap resampled mean of Hatchback and hardtop cars" , "is:",two.boot.mean.bshathar$t0,"\n")
cat("Difference between ONE bootstrap resampled mean of Sedan and hardtop cars" , "is:",NumericBoostrapMeanbssed - NumericBoostrapMeanbshar,"\n")
cat("Difference between TWO bootstrap resampled mean of Sedan and hardtop cars" , "is:",two.boot.mean.bssedhar$t0,"\n")
cat("Difference between ONE bootstrap resampled mean of Wagon and hardtop cars" , "is:",NumericBoostrapMeanbswag - NumericBoostrapMeanbshar,"\n")
cat("Difference between TWO bootstrap resampled mean of Wagon and hardtop cars" , "is:",two.boot.mean.bswaghar$t0,"\n")
cat("Difference between ONE bootstrap resampled mean of Sedan and hatchback cars" , "is:",NumericBoostrapMeanbssed - NumericBoostrapMeanbshat,"\n")
cat("Difference between TWO bootstrap resampled mean of Sedan and hatchback cars" , "is:",two.boot.mean.bssedhat$t0,"\n")
cat("Difference between ONE bootstrap resampled mean of Wagon and hatchback cars" , "is:",NumericBoostrapMeanbswag - NumericBoostrapMeanbshat,"\n")
cat("Difference between TWO bootstrap resampled mean of Wagon and hatchback cars" , "is:",two.boot.mean.bswaghat$t0,"\n")
cat("Difference between ONE bootstrap resampled mean of Wagon and sedan cars" , "is:",NumericBoostrapMeanbswag - NumericBoostrapMeanbssed,"\n")
cat("Difference between TWO bootstrap resampled mean of Wagon and sedan cars" , "is:",two.boot.mean.bswagsed$t0,"\n")
# Plot TWO BOOTSTRAP resample mean grouped by Body style
plot.diff(two.boot.mean.bsharconv$t,cols = c('Mean Difference--Fuel Type(Hardtop & Convertible)'))
plot.diff(two.boot.mean.bshatconv$t,cols = c('Mean Difference--Body Style(Hatchback & Convertible)'))
plot.diff(two.boot.mean.bssedconv$t,cols = c('Mean Difference--Body Style(Sedan & Convertible)'))
plot.diff(two.boot.mean.bswagconv$t,cols = c('Mean Difference--Body Style(Wagon & Convertible)'))
plot.diff(two.boot.mean.bshathar$t,cols = c('Mean Difference--Body Style(Hatchback & Hardtop)'))
plot.diff(two.boot.mean.bssedhar$t,cols = c('Mean Difference--Body Style(Sedan & Hardtop)'))
plot.diff(two.boot.mean.bswaghar$t,cols = c('Mean Difference--Body Style(Wagon & Hardtop)'))
plot.diff(two.boot.mean.bssedhat$t,cols = c('Mean Difference--Body Style(Sedan & Hatchback)'))
plot.diff(two.boot.mean.bswaghat$t,cols = c('Mean Difference--Body Style(Wagon & Hatchback)'))
plot.diff(two.boot.mean.bswagsed$t,cols = c('Body Style(Wagon & Sedan)'))
recentgrads$Major_category_n <- as.numeric(factor(recentgrads$Major_category , levels=Recent_Graduate_GroupbyMajorCategory_unemployment$Major_category)
#Stratifying the data.
#Stratify By Major Category
loggradmediangroupedbyMajorCategory = gradstudents %>% filter(gradstudents$Major_category == 'gas')
loggradmediangroupedbyfueltypediesel = gradstudents %>% filter(fuel.type == 'diesel')
#Stratify by Aspiration
loggradmediangroupedbyaspirationstd = gradstudents %>% filter(aspiration == 'std')
loggradmediangroupedbyaspirationsturbo = gradstudents %>% filter(aspiration == 'turbo')
#Stratify data as per body style.
stratified_pricebody_con = gradstudents %>% filter(body.style == 'convertible')
stratified_pricebody_hat = gradstudents %>% filter(body.style == 'hatchback')
stratified_pricebody_sed = gradstudents %>% filter(body.style == 'sedan')
stratified_pricebody_wag = gradstudents %>% filter(body.style == 'wagon')
stratified_pricebody_har = gradstudents %>% filter(body.style == 'hardtop')
#Standard mean.
stdmeanftgas <- mean(loggradmediangroupedbyfueltypegas$normalized_gradlogmedian)
stdmeanftdiesel <- mean(loggradmediangroupedbyfueltypediesel$normalized_gradlogmedian)
stdmeanaspstd <- mean(loggradmediangroupedbyaspirationstd$normalized_gradlogmedian)
stdmeanasptur <- mean(loggradmediangroupedbyaspirationsturbo$normalized_gradlogmedian)
stdmeanbsconv <- mean(stratified_pricebody_con$normalized_gradlogmedian)
stdmeanbshar <- mean(stratified_pricebody_har$normalized_gradlogmedian)
stdmeanbshat <- mean(stratified_pricebody_hat$normalized_gradlogmedian)
stdmeanbssed <- mean(stratified_pricebody_sed$normalized_gradlogmedian)
stdmeanbswag <- mean(stratified_pricebody_wag$normalized_gradlogmedian)
## Student T-Test to calculate the mean based on Fuel Type.
ttestftgas <- t.test(loggradmediangroupedbyfueltypegas$normalized_gradlogmedian, gradstudents$normalized_gradlogmedian, alternative = "two.sided")
ttestftgasestimate <- ttestftgas$estimate
ttestftgasmean <- ttestftgasestimate[1]
ttestftdiesel <- t.test(loggradmediangroupedbyfueltypediesel$normalized_gradlogmedian, gradstudents$normalized_gradlogmedian, alternative = "two.sided")
ttestftdieselestimate <- ttestftdiesel$estimate
ttestftdieselmean <- ttestftdieselestimate[1]
## Student T-Test to calculate the mean based on Aspiration.
ttestaspstd<- t.test(loggradmediangroupedbyaspirationstd$normalized_gradlogmedian, gradstudents$normalized_gradlogmedian, alternative = "two.sided")
ttestaspstdestimate <- ttestaspstd$estimate
ttestaspstdmean <- ttestaspstdestimate[1]
ttestaspturbo <- t.test(loggradmediangroupedbyaspirationsturbo$normalized_gradlogmedian, gradstudents$normalized_gradlogmedian, alternative = "two.sided")
ttestaspturboestimate <- ttestaspturbo$estimate
ttestaspturbomean <- ttestaspturboestimate[1]
## Bootstrap the mean of the auto price grouped by aspiration
mean.boot.aspstd = one.boot(loggradmediangroupedbyaspirationstd$normalized_gradlogmedian, mean, R = 100000)
mean.boot.aspturb = one.boot(loggradmediangroupedbyaspirationsturbo$normalized_gradlogmedian, mean, R = 100000)
# Retrieve mean for numerical comparision between the means using ONE BOOT method.
NumericBoostrapMeanAspStd <- mean.boot.aspstd$t0
NumericBoostrapMeanAspTur <- mean.boot.aspturb$t0
## Bootstrap the mean of the auto price grouped by fuel type
mean.boot.ftgas = one.boot(loggradmediangroupedbyfueltypegas$normalized_gradlogmedian, mean, R = 100000)
mean.boot.ftdiesel = one.boot(loggradmediangroupedbyfueltypediesel$normalized_gradlogmedian, mean, R = 100000)
# Retrieve mean for numerical comparision between the means using ONE BOOT method.
NumericBoostrapMeanftgas <- mean.boot.ftgas$t0
NumericBoostrapMeanftdiesel <- mean.boot.ftdiesel$t0
cat("Difference between ONE bootstrap resampled mean and standard mean of Turbo cars" , "is:",NumericBoostrapMeanAspTur - stdmeanasptur,"\n")
cat("Difference between ONE bootstrap resampled mean and standard mean of Standard cars" , "is:",NumericBoostrapMeanAspStd - stdmeanaspstd,"\n")
cat("Difference between ONE bootstrap resampled mean of turbo and t-test mean of turbo cars" , "is:",NumericBoostrapMeanAspTur - ttestaspturbomean,"\n")
cat("Difference between ONE bootstrap resampled mean of standard and t-test mean of standard cars" , "is:",NumericBoostrapMeanAspStd - ttestaspstdmean,"\n")
cat("Difference between ONE bootstrap resampled mean and standard mean of Diesel cars" , "is:",NumericBoostrapMeanftdiesel - stdmeanftdiesel,"\n")
cat("Difference between ONE bootstrap resampled mean and standard mean of Gas cars" , "is:",NumericBoostrapMeanftgas - stdmeanftgas,"\n")
cat("Difference between ONE bootstrap resampled mean of Diesel and t-test mean of Diesel cars" , "is:",NumericBoostrapMeanftdiesel - ttestftdieselmean,"\n")
cat("Difference between ONE bootstrap resampled mean of Gas and t-test mean of gas cars" , "is:",NumericBoostrapMeanftgas - ttestftgasmean,"\n")
#Plot Mean
plot.hist <- function(a, maxs,mins, cols = c('pop_A', 'pop_B'), nbins = 80, p = 0.05){
breaks = seq(maxs, mins, length.out = (nbins + 1))
hist(a, breaks = breaks, main = paste('Histogram of Means'), xlab = cols[1])
abline(v = mean(a), lwd = 4, col = 'red')
abline(v = 0, lwd = 4, col = 'blue')
abline(v = quantile(a, probs = p/2), lty = 3, col = 'red', lwd = 3)
abline(v = quantile(a, probs = (1 - p/2)), lty = 3, col = 'red', lwd = 3)
}
plot.t <- function(a, b, cols = c('pop_A', 'pop_B'), nbins = 80, p = 0.05){
maxs = max(c(max(a), max(b)))
mins = min(c(min(a), min(b)))
par(mfrow = c(2, 1))
plot.hist(a, maxs, mins, cols = cols[1])
plot.hist(b, maxs, mins, cols = cols[2])
par(mfrow = c(1, 1))
}
#Visually see the difference in between ONE bootstrap resampled Std and Turbo means.
plot.t(mean.boot.aspturb$t,mean.boot.aspstd$t, cols = c('Turbo', 'Standard'),nbins = 80)
#Visually see the difference in between ONE bootstrap resampled Std and Turbo means.
plot.t(mean.boot.ftdiesel$t, mean.boot.ftgas$t, cols = c('Diesel', 'Gas'),nbins = 80)
# Problem # 2
## Function to plot TWO BOOT.
plot.diff <- function(a, cols = c('pop_A'), nbins = 80, p = 0.05){
maxs = max(a)
mins = min(a)
plot.hist(a, maxs, mins, cols = cols[1])
}
options(repr.plot.width=6, repr.plot.height=4)
## One Bootstrap the mean of the auto price grouped by body style
mean.boot.bsconv = one.boot(stratified_pricebody_con$normalized_gradlogmedian, mean, R = 100000)
mean.boot.bshar = one.boot(stratified_pricebody_har$normalized_gradlogmedian, mean, R = 100000)
mean.boot.bshat = one.boot(stratified_pricebody_hat$normalized_gradlogmedian, mean, R = 100000)
mean.boot.bssed = one.boot(stratified_pricebody_sed$normalized_gradlogmedian, mean, R = 100000)
mean.boot.bswag = one.boot(stratified_pricebody_wag$normalized_gradlogmedian, mean, R = 100000)
# Two BootStrap mean of the auto price based on body style
## Two Bootstrap : Difference in means of Hardtop & Convertible
two.boot.mean.bsharconv = two.boot(stratified_pricebody_har$normalized_gradlogmedian,stratified_pricebody_con$normalized_gradlogmedian,mean, R = 100000)
## Two Bootstrap : Difference in means of Hatchback & Convertible
two.boot.mean.bshatconv = two.boot(stratified_pricebody_hat$normalized_gradlogmedian,stratified_pricebody_con$normalized_gradlogmedian,mean, R = 100000)
## Two Bootstrap : Difference in means of Sedan & Convertible
two.boot.mean.bssedconv = two.boot(stratified_pricebody_sed$normalized_gradlogmedian,stratified_pricebody_con$normalized_gradlogmedian,mean, R = 100000)
## Two Bootstrap : Difference in means of Wagon & Convertible
two.boot.mean.bswagconv = two.boot(stratified_pricebody_wag$normalized_gradlogmedian,stratified_pricebody_con$normalized_gradlogmedian,mean, R = 100000)
## Two Bootstrap : Difference in means of Hatchback & Hardtop
two.boot.mean.bshathar = two.boot(stratified_pricebody_hat$normalized_gradlogmedian,stratified_pricebody_har$normalized_gradlogmedian,mean, R = 100000)
## Two Bootstrap : Difference in means of Sedan & Hardtop
two.boot.mean.bssedhar = two.boot(stratified_pricebody_sed$normalized_gradlogmedian,stratified_pricebody_har$normalized_gradlogmedian,mean, R = 100000)
## Two Bootstrap : Difference in means of Wagon & Hardtop
two.boot.mean.bswaghar = two.boot(stratified_pricebody_wag$normalized_gradlogmedian,stratified_pricebody_har$normalized_gradlogmedian,mean, R = 100000)
## Two Bootstrap : Difference in means of Sedan & Hatchback
two.boot.mean.bssedhat = two.boot(stratified_pricebody_sed$normalized_gradlogmedian,stratified_pricebody_hat$normalized_gradlogmedian,mean, R = 100000)
## Two Bootstrap : Difference in means of Wagon & Hatchback
two.boot.mean.bswaghat = two.boot(stratified_pricebody_wag$normalized_gradlogmedian,stratified_pricebody_hat$normalized_gradlogmedian,mean, R = 100000)
## Two Bootstrap : Difference in means of Wagon & Sedan
two.boot.mean.bswagsed = two.boot(stratified_pricebody_wag$normalized_gradlogmedian,stratified_pricebody_sed$normalized_gradlogmedian,mean, R = 100000)
# Retrieve mean for numerical comparision between the means using ONE BOOT method.
NumericBoostrapMeanbsconv <- mean.boot.bsconv$t0
NumericBoostrapMeanbshar <- mean.boot.bshar$t0
NumericBoostrapMeanbshat <- mean.boot.bshat$t0
NumericBoostrapMeanbssed <- mean.boot.bssed$t0
NumericBoostrapMeanbswag <- mean.boot.bswag$t0
#Numerical difference.
cat("Difference between ONE bootstrap resampled mean of Hardtop and covertible cars" , "is:",NumericBoostrapMeanbshar - NumericBoostrapMeanbsconv,"\n")
cat("Difference between TWO bootstrap resampled mean of Hardtop and covertible cars" , "is:",two.boot.mean.bsharconv$t0,"\n")
cat("Difference between ONE bootstrap resampled mean of Hatchback and covertible cars" , "is:",NumericBoostrapMeanbshat - NumericBoostrapMeanbsconv,"\n")
cat("Difference between TWO bootstrap resampled mean of Hatchback and covertible cars" , "is:",two.boot.mean.bshatconv$t0,"\n")
cat("Difference between ONE bootstrap resampled mean of Sedan and covertible cars" , "is:",NumericBoostrapMeanbssed - NumericBoostrapMeanbsconv,"\n")
cat("Difference between TWO bootstrap resampled mean of Sedan and covertible cars" , "is:",two.boot.mean.bssedconv$t0,"\n")
cat("Difference between ONE bootstrap resampled mean of Wagon and covertible cars" , "is:",NumericBoostrapMeanbswag - NumericBoostrapMeanbsconv,"\n")
cat("Difference between TWO bootstrap resampled mean of Wagon and covertible cars" , "is:",two.boot.mean.bswagconv$t0,"\n")
cat("Difference between ONE bootstrap resampled mean of Hatchback and hardtop cars" , "is:",NumericBoostrapMeanbshat - NumericBoostrapMeanbshar,"\n")
cat("Difference between TWO bootstrap resampled mean of Hatchback and hardtop cars" , "is:",two.boot.mean.bshathar$t0,"\n")
cat("Difference between ONE bootstrap resampled mean of Sedan and hardtop cars" , "is:",NumericBoostrapMeanbssed - NumericBoostrapMeanbshar,"\n")
cat("Difference between TWO bootstrap resampled mean of Sedan and hardtop cars" , "is:",two.boot.mean.bssedhar$t0,"\n")
cat("Difference between ONE bootstrap resampled mean of Wagon and hardtop cars" , "is:",NumericBoostrapMeanbswag - NumericBoostrapMeanbshar,"\n")
cat("Difference between TWO bootstrap resampled mean of Wagon and hardtop cars" , "is:",two.boot.mean.bswaghar$t0,"\n")
cat("Difference between ONE bootstrap resampled mean of Sedan and hatchback cars" , "is:",NumericBoostrapMeanbssed - NumericBoostrapMeanbshat,"\n")
cat("Difference between TWO bootstrap resampled mean of Sedan and hatchback cars" , "is:",two.boot.mean.bssedhat$t0,"\n")
cat("Difference between ONE bootstrap resampled mean of Wagon and hatchback cars" , "is:",NumericBoostrapMeanbswag - NumericBoostrapMeanbshat,"\n")
cat("Difference between TWO bootstrap resampled mean of Wagon and hatchback cars" , "is:",two.boot.mean.bswaghat$t0,"\n")
cat("Difference between ONE bootstrap resampled mean of Wagon and sedan cars" , "is:",NumericBoostrapMeanbswag - NumericBoostrapMeanbssed,"\n")
cat("Difference between TWO bootstrap resampled mean of Wagon and sedan cars" , "is:",two.boot.mean.bswagsed$t0,"\n")
# Plot TWO BOOTSTRAP resample mean grouped by Body style
plot.diff(two.boot.mean.bsharconv$t,cols = c('Mean Difference--Fuel Type(Hardtop & Convertible)'))
plot.diff(two.boot.mean.bshatconv$t,cols = c('Mean Difference--Body Style(Hatchback & Convertible)'))
plot.diff(two.boot.mean.bssedconv$t,cols = c('Mean Difference--Body Style(Sedan & Convertible)'))
plot.diff(two.boot.mean.bswagconv$t,cols = c('Mean Difference--Body Style(Wagon & Convertible)'))
plot.diff(two.boot.mean.bshathar$t,cols = c('Mean Difference--Body Style(Hatchback & Hardtop)'))
plot.diff(two.boot.mean.bssedhar$t,cols = c('Mean Difference--Body Style(Sedan & Hardtop)'))
plot.diff(two.boot.mean.bswaghar$t,cols = c('Mean Difference--Body Style(Wagon & Hardtop)'))
plot.diff(two.boot.mean.bssedhat$t,cols = c('Mean Difference--Body Style(Sedan & Hatchback)'))
plot.diff(two.boot.mean.bswaghat$t,cols = c('Mean Difference--Body Style(Wagon & Hatchback)'))
plot.diff(two.boot.mean.bswagsed$t,cols = c('Body Style(Wagon & Sedan)'))
recentgrads$Major_category_n <- as.numeric(factor(recentgrads$Major_category , levels=Recent_Graduate_GroupbyMajorCategory_unemployment$Major_category))
View(recentgrads)
View(recentgrads)
str(recentgrads)
Recent_Graduate_GroupbyMajor_unemployment <-
recentgrads %>% group_by(Major) %>% summarise(normalized_gradundemployment = mean(normalized_gradundemployment))
View(Recent_Graduate_GroupbyMajor_unemployment)
View(Recent_Graduate_GroupbyMajor_unemployment)
recentgrads$Major_n <- as.numeric(factor(recentgrads$Major , levels=Recent_Graduate_GroupbyMajor_unemployment$Major))
str(recentgrads)
numeric_recentgrads <- recentgrads[sapply(recentgrads,is.numeric)]
str(numeric_recentgrads)
table(recentgrads$Major_category_n)
#Frequency table of two categorical variables.
table(recentgrads$Major_category_n, recentgrads$Major_n)
table(recentgrads$Major_category_n)
table(recentgrads$Major_n,recentgrads$Major_category_n)
str(recentgrads)
numeric_recentgrads <- data.frame(recentgrads[sapply(recentgrads,is.numeric)])
str(numeric_recentgrads)
View(numeric_recentgrads)
lapply(numeric_recentgrads, summary)
str(numeric_recentgrads)
lapply(numeric_recentgrads, sd)
table(numeric_recentgrads$Major_category_n)
str(numeric_recentgrads)
ggplot(numeric_recentgrads, aes(x = factor(Major_category_n), y = Median) + geom_boxplot() +
xlab('Major Category') + ggtitle('Major category by Median'))
cov(numeric_recentgrads)
cor(numeric_recentgrads)# Overall.Height is strongly related to Heating.load and cooling.load
ggplot(numeric_recentgrads, aes(x = factor(Major_category_n), y = Major_n) + geom_boxplot() +
xlab('Major Category') + ggtitle('Major category by Median'))
ggplot(numeric_recentgrads, aes(x = factor(0), y = Major_category_n )) + geom_boxplot()
ggplot(numeric_recentgrads, aes(x = factor(Major_category_n), y = Major_n) + geom_boxplot())
ggplot(numeric_recentgrads, aes(x = Major_category_n, y = Major_n) + geom_boxplot() +
xlab('Major Category') + ggtitle('Major category by Median'))
str(numeric_recentgrads)
numeric_recentgrads <- data.framea(as.numeric(recentgrads[sapply(recentgrads,is.numeric)]))
numeric_recentgrads <- data.frame(as.numeric(recentgrads[sapply(recentgrads,is.numeric)]))
numeric_recentgrads <- data.frame(recentgrads[sapply(recentgrads,is.numeric)])
str(numeric_recentgrads)
numeric_recentgrads1 <- data.frame(recentgrads[sapply(recentgrads,is.numeric)])
numeric_recentgrads <- lapply(numeric_recentgrads1, as.numeric)
str(numeric_recentgrads)
table(numeric_recentgrads$Major_category_n)
require(ggplot2)
ggplot(numeric_recentgrads, aes(x = factor(0), y = Major_category_n )) + geom_boxplot()
numeric_recentgrads1 <- data.frame(recentgrads[sapply(recentgrads,is.numeric)])
numeric_recentgrads <- data.frame(lapply(numeric_recentgrads1, as.numeric))
str(numeric_recentgrads)
require(ggplot2)
ggplot(numeric_recentgrads, aes(x = factor(0), y = Major_category_n )) + geom_boxplot()
ggplot(numeric_recentgrads, aes(x = Major_category_n, y = Major_n) + geom_boxplot() +
xlab('Major Category') + ggtitle('Major category by Median'))
